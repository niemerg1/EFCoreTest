// <auto-generated />
using System;
using EFCoreTest.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFCoreTest.Migrations
{
    [DbContext(typeof(ClaimSubmissionContext))]
    [Migration("20230717162009_updateDateTimeFields")]
    partial class updateDateTimeFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EFCoreTest.Models.Claim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttorneyId")
                        .HasColumnType("int");

                    b.Property<int>("CountyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("DateTime");

                    b.Property<int>("FilerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("DateTime");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountyId");

                    b.HasIndex("FilerId");

                    b.HasIndex("StatusId");

                    b.ToTable("Claim", (string)null);
                });

            modelBuilder.Entity("EFCoreTest.Models.ClaimDefendentLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClaimId")
                        .HasColumnType("int");

                    b.Property<int>("DefendentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClaimId");

                    b.HasIndex("DefendentId");

                    b.ToTable("ClaimDefendentLink", (string)null);
                });

            modelBuilder.Entity("EFCoreTest.Models.ClaimPlaintiffLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClaimId")
                        .HasColumnType("int");

                    b.Property<int>("PlaintiffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClaimId");

                    b.HasIndex("PlaintiffId");

                    b.ToTable("ClaimPlaintiffLink", (string)null);
                });

            modelBuilder.Entity("EFCoreTest.Models.County", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("County", (string)null);
                });

            modelBuilder.Entity("EFCoreTest.Models.Defendent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsOrganization")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Defendent", (string)null);
                });

            modelBuilder.Entity("EFCoreTest.Models.Filer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FilerTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("FirmId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FilerTypeId");

                    b.HasIndex("FirmId");

                    b.ToTable("Filer", (string)null);
                });

            modelBuilder.Entity("EFCoreTest.Models.FilerAssociation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssociationId")
                        .HasColumnType("int");

                    b.Property<int>("ClaimId")
                        .HasColumnType("int");

                    b.Property<int>("FilerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssociationId");

                    b.HasIndex("ClaimId");

                    b.HasIndex("FilerId");

                    b.ToTable("FilerAssociations");
                });

            modelBuilder.Entity("EFCoreTest.Models.FilerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("FilerType", (string)null);
                });

            modelBuilder.Entity("EFCoreTest.Models.Firm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Firm", (string)null);
                });

            modelBuilder.Entity("EFCoreTest.Models.Plaintiff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClaimId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMinor")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPatient")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Plaintiff", (string)null);
                });

            modelBuilder.Entity("EFCoreTest.Models.QueueStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("QueueStatus", (string)null);
                });

            modelBuilder.Entity("EFCoreTest.Models.Claim", b =>
                {
                    b.HasOne("EFCoreTest.Models.County", "County")
                        .WithMany()
                        .HasForeignKey("CountyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCoreTest.Models.Filer", "Filer")
                        .WithMany("Claims")
                        .HasForeignKey("FilerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCoreTest.Models.QueueStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("County");

                    b.Navigation("Filer");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("EFCoreTest.Models.ClaimDefendentLink", b =>
                {
                    b.HasOne("EFCoreTest.Models.Claim", "Claim")
                        .WithMany("ClaimDefendents")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCoreTest.Models.Defendent", "Defendent")
                        .WithMany()
                        .HasForeignKey("DefendentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("Defendent");
                });

            modelBuilder.Entity("EFCoreTest.Models.ClaimPlaintiffLink", b =>
                {
                    b.HasOne("EFCoreTest.Models.Claim", "Claim")
                        .WithMany("ClaimPlaintiffs")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCoreTest.Models.Plaintiff", "Plaintiff")
                        .WithMany()
                        .HasForeignKey("PlaintiffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("Plaintiff");
                });

            modelBuilder.Entity("EFCoreTest.Models.Filer", b =>
                {
                    b.HasOne("EFCoreTest.Models.FilerType", "FilerType")
                        .WithMany()
                        .HasForeignKey("FilerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCoreTest.Models.Firm", null)
                        .WithMany("Filers")
                        .HasForeignKey("FirmId");

                    b.Navigation("FilerType");
                });

            modelBuilder.Entity("EFCoreTest.Models.FilerAssociation", b =>
                {
                    b.HasOne("EFCoreTest.Models.Filer", "Association")
                        .WithMany("FilerAssociationsAsAssociation")
                        .HasForeignKey("AssociationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EFCoreTest.Models.Claim", "Claim")
                        .WithMany()
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCoreTest.Models.Filer", "Filer")
                        .WithMany("FilerAssociationsAsFiler")
                        .HasForeignKey("FilerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Association");

                    b.Navigation("Claim");

                    b.Navigation("Filer");
                });

            modelBuilder.Entity("EFCoreTest.Models.Claim", b =>
                {
                    b.Navigation("ClaimDefendents");

                    b.Navigation("ClaimPlaintiffs");
                });

            modelBuilder.Entity("EFCoreTest.Models.Filer", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("FilerAssociationsAsAssociation");

                    b.Navigation("FilerAssociationsAsFiler");
                });

            modelBuilder.Entity("EFCoreTest.Models.Firm", b =>
                {
                    b.Navigation("Filers");
                });
#pragma warning restore 612, 618
        }
    }
}
